{"version":3,"file":"static/js/115.e608a40a.chunk.js","mappings":"sIAAA,SAASA,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQC,EAAKC,GACpE,IACE,IAAIC,EAAOP,EAAIK,GAAKC,GAChBE,EAAQD,EAAKC,KAInB,CAHE,MAAOC,GAEP,YADAP,EAAOO,EAET,CAEIF,EAAKG,KACPT,EAAQO,GAERG,QAAQV,QAAQO,GAAOI,KAAKT,EAAOC,EAEvC,CAEe,SAASS,EAAkBC,GACxC,OAAO,WACL,IAAIC,EAAOC,KACPC,EAAOC,UACX,OAAO,IAAIP,SAAQ,SAAUV,EAASC,GACpC,IAAIF,EAAMc,EAAGK,MAAMJ,EAAME,GAEzB,SAASd,EAAMK,GACbT,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,OAAQI,EAClE,CAEA,SAASJ,EAAOgB,GACdrB,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,QAASgB,EACnE,CAEAjB,OAAMkB,EACR,GACF,CACF,C,uJClCMC,EAAM,+BACNC,EAAM,mCAAZ,SAEeC,IAAAA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,CAAAA,SAAAA,IAAf,OAAeA,EAAAA,EAAAA,IAAAA,MAAf,2GAA2BC,EAA3B,+BAAiC,GAAIC,EAArC,+BAA8C,CAAC,EAA/C,SACyBC,MAAMF,EAAKC,GADpC,YACQE,EADR,QAEkBC,GAFlB,iCAGYD,EAASE,OAHrB,gDAIMnB,QAAQT,OAAO,IAAI6B,MAAM,cAJ/B,2GAOO,SAASC,IACd,OAAOR,EAAY,GAAD,OAAIF,EAAJ,uCAAsCC,GACzD,CAGM,SAASU,EAAeC,GAC7B,OAAOV,EAAY,GAAD,OAAIF,EAAJ,kBAAiBY,EAAjB,oBAAoCX,GACvD,CAEM,SAASY,EAAkBD,GAChC,OAAOV,EAAY,GAAD,OACbF,EADa,kBACAY,EADA,4BAC2BX,GAE9C,CAEM,SAASa,EAAkBF,GAChC,OAAOV,EAAY,GAAD,OACbF,EADa,kBACAY,EADA,4BAC2BX,GAE9C,CAEM,SAASc,EAAqBC,GACnC,OAAOd,EAAY,GAAD,OACbF,EADa,iCACeC,EADf,kBAC4Be,GAE/C,C,8ECLD,UA1Ba,WACX,IAAQJ,GAAYK,EAAAA,EAAAA,MAAZL,QACR,GAA0BM,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KAOA,OALAC,EAAAA,EAAAA,YAAU,YACRR,EAAAA,EAAAA,IAAkBD,GACftB,MAAK,gBAAGgC,EAAH,EAAGA,KAAH,OAAcF,EAASE,EAAvB,GACT,GAAE,CAACV,KAGF,gCACKO,EAAMI,SACP,wBACGJ,EAAMK,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,KAAMC,EAAb,EAAaA,aAAcC,EAA3B,EAA2BA,UAA3B,OACT,0BACGD,IAAiB,gBAAKE,IAAG,0CAAqCF,GAAgBG,IAAKJ,KACpF,uBAAIA,KACJ,uBAAIE,MAHGH,EADA,OAYpB,C","sources":["../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js","api/fetchMovies.js","pages/Cast/Cast.jsx"],"sourcesContent":["function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}","const URL = 'https://api.themoviedb.org/3';\nconst KEY = 'f72ccb0427a42697e4de02bf8efae0dc';\n\nasync function fetchMovies(url = '', config = {}) {\n  const response = await fetch(url, config);\n  return response.ok\n    ? await response.json()\n    : Promise.reject(new Error('Not found'));\n}\n\nexport function fetchTrending() {\n  return fetchMovies(`${URL}/trending/movie/day?api_key=${KEY}`);\n}\n\n\nexport function fetchMovieInfo(movieId) {\n  return fetchMovies(`${URL}/movie/${movieId}?api_key=${KEY}`);\n}\n\nexport function fetchMovieCredits(movieId) {\n  return fetchMovies(\n    `${URL}/movie/${movieId}/credits?api_key=${KEY}`\n  );\n}\n\nexport function fetchMovieReviews(movieId) {\n  return fetchMovies(\n    `${URL}/movie/${movieId}/reviews?api_key=${KEY}`\n  );\n}\n\nexport function fetchWithQueryMovies(searchQuery) {\n  return fetchMovies(\n    `${URL}/search/movie?api_key=${KEY}&query=${searchQuery}`\n  );\n}\n","import { useParams } from \"react-router-dom\";\nimport { useState, useEffect } from \"react\";\nimport { fetchMovieCredits } from \"api/fetchMovies\";\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [casts, setCasts] = useState([]);\n\n  useEffect(() => {\n    fetchMovieCredits(movieId)\n      .then(({ cast }) => setCasts(cast));\n  }, [movieId]);\n\n  return (\n    <>\n      {!!casts.length && (\n        <ul>\n          {casts.map(({ id, name, profile_path, character }) => (\n            <li key={id}>\n              {profile_path && (<img src={`https://image.tmdb.org/t/p/w200/${profile_path}`} alt={name}></img>)}\n              <p>{name}</p>\n              <p>{character}</p>\n            </li>\n          ))}\n        </ul>\n      )}\n\n    </>\n  )\n}\nexport default Cast\n"],"names":["asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","error","done","Promise","then","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined","URL","KEY","fetchMovies","url","config","fetch","response","ok","json","Error","fetchTrending","fetchMovieInfo","movieId","fetchMovieCredits","fetchMovieReviews","fetchWithQueryMovies","searchQuery","useParams","useState","casts","setCasts","useEffect","cast","length","map","id","name","profile_path","character","src","alt"],"sourceRoot":""}